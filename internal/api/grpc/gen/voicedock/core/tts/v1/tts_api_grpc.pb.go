// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             (unknown)
// source: voicedock/core/tts/v1/tts_api.proto

package ttsv1

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	TtsAPI_TextToSpeech_FullMethodName  = "/voicedock.core.tts.v1.TtsAPI/TextToSpeech"
	TtsAPI_GetVoices_FullMethodName     = "/voicedock.core.tts.v1.TtsAPI/GetVoices"
	TtsAPI_DownloadVoice_FullMethodName = "/voicedock.core.tts.v1.TtsAPI/DownloadVoice"
)

// TtsAPIClient is the client API for TtsAPI service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type TtsAPIClient interface {
	// Converts text to speech.
	TextToSpeech(ctx context.Context, in *TextToSpeechRequest, opts ...grpc.CallOption) (TtsAPI_TextToSpeechClient, error)
	// Returns available voices.
	GetVoices(ctx context.Context, in *GetVoicesRequest, opts ...grpc.CallOption) (*GetVoicesResponse, error)
	// Downloads selected voice.
	DownloadVoice(ctx context.Context, in *DownloadVoiceRequest, opts ...grpc.CallOption) (*DownloadVoiceResponse, error)
}

type ttsAPIClient struct {
	cc grpc.ClientConnInterface
}

func NewTtsAPIClient(cc grpc.ClientConnInterface) TtsAPIClient {
	return &ttsAPIClient{cc}
}

func (c *ttsAPIClient) TextToSpeech(ctx context.Context, in *TextToSpeechRequest, opts ...grpc.CallOption) (TtsAPI_TextToSpeechClient, error) {
	stream, err := c.cc.NewStream(ctx, &TtsAPI_ServiceDesc.Streams[0], TtsAPI_TextToSpeech_FullMethodName, opts...)
	if err != nil {
		return nil, err
	}
	x := &ttsAPITextToSpeechClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type TtsAPI_TextToSpeechClient interface {
	Recv() (*TextToSpeechResponse, error)
	grpc.ClientStream
}

type ttsAPITextToSpeechClient struct {
	grpc.ClientStream
}

func (x *ttsAPITextToSpeechClient) Recv() (*TextToSpeechResponse, error) {
	m := new(TextToSpeechResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *ttsAPIClient) GetVoices(ctx context.Context, in *GetVoicesRequest, opts ...grpc.CallOption) (*GetVoicesResponse, error) {
	out := new(GetVoicesResponse)
	err := c.cc.Invoke(ctx, TtsAPI_GetVoices_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *ttsAPIClient) DownloadVoice(ctx context.Context, in *DownloadVoiceRequest, opts ...grpc.CallOption) (*DownloadVoiceResponse, error) {
	out := new(DownloadVoiceResponse)
	err := c.cc.Invoke(ctx, TtsAPI_DownloadVoice_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// TtsAPIServer is the server API for TtsAPI service.
// All implementations must embed UnimplementedTtsAPIServer
// for forward compatibility
type TtsAPIServer interface {
	// Converts text to speech.
	TextToSpeech(*TextToSpeechRequest, TtsAPI_TextToSpeechServer) error
	// Returns available voices.
	GetVoices(context.Context, *GetVoicesRequest) (*GetVoicesResponse, error)
	// Downloads selected voice.
	DownloadVoice(context.Context, *DownloadVoiceRequest) (*DownloadVoiceResponse, error)
	mustEmbedUnimplementedTtsAPIServer()
}

// UnimplementedTtsAPIServer must be embedded to have forward compatible implementations.
type UnimplementedTtsAPIServer struct {
}

func (UnimplementedTtsAPIServer) TextToSpeech(*TextToSpeechRequest, TtsAPI_TextToSpeechServer) error {
	return status.Errorf(codes.Unimplemented, "method TextToSpeech not implemented")
}
func (UnimplementedTtsAPIServer) GetVoices(context.Context, *GetVoicesRequest) (*GetVoicesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetVoices not implemented")
}
func (UnimplementedTtsAPIServer) DownloadVoice(context.Context, *DownloadVoiceRequest) (*DownloadVoiceResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DownloadVoice not implemented")
}
func (UnimplementedTtsAPIServer) mustEmbedUnimplementedTtsAPIServer() {}

// UnsafeTtsAPIServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to TtsAPIServer will
// result in compilation errors.
type UnsafeTtsAPIServer interface {
	mustEmbedUnimplementedTtsAPIServer()
}

func RegisterTtsAPIServer(s grpc.ServiceRegistrar, srv TtsAPIServer) {
	s.RegisterService(&TtsAPI_ServiceDesc, srv)
}

func _TtsAPI_TextToSpeech_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(TextToSpeechRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(TtsAPIServer).TextToSpeech(m, &ttsAPITextToSpeechServer{stream})
}

type TtsAPI_TextToSpeechServer interface {
	Send(*TextToSpeechResponse) error
	grpc.ServerStream
}

type ttsAPITextToSpeechServer struct {
	grpc.ServerStream
}

func (x *ttsAPITextToSpeechServer) Send(m *TextToSpeechResponse) error {
	return x.ServerStream.SendMsg(m)
}

func _TtsAPI_GetVoices_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetVoicesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TtsAPIServer).GetVoices(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: TtsAPI_GetVoices_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TtsAPIServer).GetVoices(ctx, req.(*GetVoicesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TtsAPI_DownloadVoice_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DownloadVoiceRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TtsAPIServer).DownloadVoice(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: TtsAPI_DownloadVoice_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TtsAPIServer).DownloadVoice(ctx, req.(*DownloadVoiceRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// TtsAPI_ServiceDesc is the grpc.ServiceDesc for TtsAPI service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var TtsAPI_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "voicedock.core.tts.v1.TtsAPI",
	HandlerType: (*TtsAPIServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetVoices",
			Handler:    _TtsAPI_GetVoices_Handler,
		},
		{
			MethodName: "DownloadVoice",
			Handler:    _TtsAPI_DownloadVoice_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "TextToSpeech",
			Handler:       _TtsAPI_TextToSpeech_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "voicedock/core/tts/v1/tts_api.proto",
}
